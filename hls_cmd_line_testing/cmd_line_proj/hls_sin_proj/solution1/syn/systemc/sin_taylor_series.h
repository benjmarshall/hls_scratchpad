// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _sin_taylor_series_HH_
#define _sin_taylor_series_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "Loop_sum_loop_proc.h"
#include "Block_sin_taylor_ser.h"
#include "p_source_files_sr.h"
#include "fifo_w64_d2_A.h"

namespace ap_rtl {

struct sin_taylor_series : public sc_module {
    // Port declarations 8
    sc_in< sc_lv<64> > x;
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_out< sc_lv<64> > ap_return;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_logic > ap_idle;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    sin_taylor_series(sc_module_name name);
    SC_HAS_PROCESS(sin_taylor_series);

    ~sin_taylor_series();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    Loop_sum_loop_proc* Loop_sum_loop_proc_U0;
    Block_sin_taylor_ser* Block_sin_taylor_ser_U0;
    p_source_files_sr* p_source_files_sr_U0;
    fifo_w64_d2_A* sum_positive_0_loc_l_U;
    fifo_w64_d2_A* sum_negative_0_loc_l_U;
    fifo_w64_d2_A* tmp_loc_channel_U;
    sc_signal< sc_logic > Loop_sum_loop_proc_U0_ap_start;
    sc_signal< sc_logic > Loop_sum_loop_proc_U0_ap_done;
    sc_signal< sc_logic > Loop_sum_loop_proc_U0_ap_continue;
    sc_signal< sc_logic > Loop_sum_loop_proc_U0_ap_idle;
    sc_signal< sc_logic > Loop_sum_loop_proc_U0_ap_ready;
    sc_signal< sc_lv<64> > Loop_sum_loop_proc_U0_ap_return_0;
    sc_signal< sc_lv<64> > Loop_sum_loop_proc_U0_ap_return_1;
    sc_signal< sc_logic > ap_channel_done_sum_negative_0_loc_l;
    sc_signal< sc_logic > sum_negative_0_loc_l_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_sum_negative_0_loc_l;
    sc_signal< sc_logic > ap_sync_channel_write_sum_negative_0_loc_l;
    sc_signal< sc_logic > ap_channel_done_sum_positive_0_loc_l;
    sc_signal< sc_logic > sum_positive_0_loc_l_full_n;
    sc_signal< sc_logic > ap_sync_reg_channel_write_sum_positive_0_loc_l;
    sc_signal< sc_logic > ap_sync_channel_write_sum_positive_0_loc_l;
    sc_signal< sc_logic > Block_sin_taylor_ser_U0_ap_start;
    sc_signal< sc_logic > Block_sin_taylor_ser_U0_ap_done;
    sc_signal< sc_logic > Block_sin_taylor_ser_U0_ap_continue;
    sc_signal< sc_logic > Block_sin_taylor_ser_U0_ap_idle;
    sc_signal< sc_logic > Block_sin_taylor_ser_U0_ap_ready;
    sc_signal< sc_lv<64> > Block_sin_taylor_ser_U0_ap_return;
    sc_signal< sc_logic > ap_channel_done_tmp_loc_channel;
    sc_signal< sc_logic > tmp_loc_channel_full_n;
    sc_signal< sc_logic > p_source_files_sr_U0_ap_start;
    sc_signal< sc_logic > p_source_files_sr_U0_ap_done;
    sc_signal< sc_logic > p_source_files_sr_U0_ap_continue;
    sc_signal< sc_logic > p_source_files_sr_U0_ap_idle;
    sc_signal< sc_logic > p_source_files_sr_U0_ap_ready;
    sc_signal< sc_lv<64> > p_source_files_sr_U0_ap_return;
    sc_signal< sc_lv<64> > tmp_p_source_files_sr_fu_42_ap_return;
    sc_signal< sc_logic > ap_sync_continue;
    sc_signal< sc_lv<64> > sum_positive_0_loc_l_dout;
    sc_signal< sc_logic > sum_positive_0_loc_l_empty_n;
    sc_signal< sc_lv<64> > sum_negative_0_loc_l_dout;
    sc_signal< sc_logic > sum_negative_0_loc_l_empty_n;
    sc_signal< sc_lv<64> > tmp_loc_channel_dout;
    sc_signal< sc_logic > tmp_loc_channel_empty_n;
    sc_signal< sc_logic > ap_sync_done;
    sc_signal< sc_logic > ap_sync_ready;
    sc_signal< sc_logic > Loop_sum_loop_proc_U0_start_full_n;
    sc_signal< sc_logic > Loop_sum_loop_proc_U0_start_write;
    sc_signal< sc_logic > Block_sin_taylor_ser_U0_start_full_n;
    sc_signal< sc_logic > Block_sin_taylor_ser_U0_start_write;
    sc_signal< sc_logic > p_source_files_sr_U0_start_full_n;
    sc_signal< sc_logic > p_source_files_sr_U0_start_write;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<64> ap_const_lv64_0;
    static const sc_lv<64> ap_const_lv64_1;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_Block_sin_taylor_ser_U0_ap_continue();
    void thread_Block_sin_taylor_ser_U0_ap_start();
    void thread_Block_sin_taylor_ser_U0_start_full_n();
    void thread_Block_sin_taylor_ser_U0_start_write();
    void thread_Loop_sum_loop_proc_U0_ap_continue();
    void thread_Loop_sum_loop_proc_U0_ap_start();
    void thread_Loop_sum_loop_proc_U0_start_full_n();
    void thread_Loop_sum_loop_proc_U0_start_write();
    void thread_ap_channel_done_sum_negative_0_loc_l();
    void thread_ap_channel_done_sum_positive_0_loc_l();
    void thread_ap_channel_done_tmp_loc_channel();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_ap_sync_channel_write_sum_negative_0_loc_l();
    void thread_ap_sync_channel_write_sum_positive_0_loc_l();
    void thread_ap_sync_continue();
    void thread_ap_sync_done();
    void thread_ap_sync_ready();
    void thread_p_source_files_sr_U0_ap_continue();
    void thread_p_source_files_sr_U0_ap_start();
    void thread_p_source_files_sr_U0_start_full_n();
    void thread_p_source_files_sr_U0_start_write();
    void thread_tmp_p_source_files_sr_fu_42_ap_return();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
