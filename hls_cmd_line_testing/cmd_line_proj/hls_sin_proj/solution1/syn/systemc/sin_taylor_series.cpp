// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "sin_taylor_series.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic sin_taylor_series::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic sin_taylor_series::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<64> sin_taylor_series::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<64> sin_taylor_series::ap_const_lv64_1 = "1";
const bool sin_taylor_series::ap_const_boolean_1 = true;

sin_taylor_series::sin_taylor_series(sc_module_name name) : sc_module(name), mVcdFile(0) {
    Loop_sum_loop_proc_U0 = new Loop_sum_loop_proc("Loop_sum_loop_proc_U0");
    Loop_sum_loop_proc_U0->ap_clk(ap_clk);
    Loop_sum_loop_proc_U0->ap_rst(ap_rst);
    Loop_sum_loop_proc_U0->ap_start(Loop_sum_loop_proc_U0_ap_start);
    Loop_sum_loop_proc_U0->ap_done(Loop_sum_loop_proc_U0_ap_done);
    Loop_sum_loop_proc_U0->ap_continue(Loop_sum_loop_proc_U0_ap_continue);
    Loop_sum_loop_proc_U0->ap_idle(Loop_sum_loop_proc_U0_ap_idle);
    Loop_sum_loop_proc_U0->ap_ready(Loop_sum_loop_proc_U0_ap_ready);
    Loop_sum_loop_proc_U0->x(x);
    Loop_sum_loop_proc_U0->ap_return_0(Loop_sum_loop_proc_U0_ap_return_0);
    Loop_sum_loop_proc_U0->ap_return_1(Loop_sum_loop_proc_U0_ap_return_1);
    Block_sin_taylor_ser_U0 = new Block_sin_taylor_ser("Block_sin_taylor_ser_U0");
    Block_sin_taylor_ser_U0->ap_clk(ap_clk);
    Block_sin_taylor_ser_U0->ap_rst(ap_rst);
    Block_sin_taylor_ser_U0->ap_start(Block_sin_taylor_ser_U0_ap_start);
    Block_sin_taylor_ser_U0->ap_done(Block_sin_taylor_ser_U0_ap_done);
    Block_sin_taylor_ser_U0->ap_continue(Block_sin_taylor_ser_U0_ap_continue);
    Block_sin_taylor_ser_U0->ap_idle(Block_sin_taylor_ser_U0_ap_idle);
    Block_sin_taylor_ser_U0->ap_ready(Block_sin_taylor_ser_U0_ap_ready);
    Block_sin_taylor_ser_U0->p_read(sum_positive_0_loc_l_dout);
    Block_sin_taylor_ser_U0->p_read1(sum_negative_0_loc_l_dout);
    Block_sin_taylor_ser_U0->ap_return(Block_sin_taylor_ser_U0_ap_return);
    p_source_files_sr_U0 = new p_source_files_sr("p_source_files_sr_U0");
    p_source_files_sr_U0->ap_clk(ap_clk);
    p_source_files_sr_U0->ap_rst(ap_rst);
    p_source_files_sr_U0->ap_start(p_source_files_sr_U0_ap_start);
    p_source_files_sr_U0->ap_done(p_source_files_sr_U0_ap_done);
    p_source_files_sr_U0->ap_continue(p_source_files_sr_U0_ap_continue);
    p_source_files_sr_U0->ap_idle(p_source_files_sr_U0_ap_idle);
    p_source_files_sr_U0->ap_ready(p_source_files_sr_U0_ap_ready);
    p_source_files_sr_U0->p_read(tmp_loc_channel_dout);
    p_source_files_sr_U0->ap_return(p_source_files_sr_U0_ap_return);
    sum_positive_0_loc_l_U = new fifo_w64_d2_A("sum_positive_0_loc_l_U");
    sum_positive_0_loc_l_U->clk(ap_clk);
    sum_positive_0_loc_l_U->reset(ap_rst);
    sum_positive_0_loc_l_U->if_read_ce(ap_var_for_const0);
    sum_positive_0_loc_l_U->if_write_ce(ap_var_for_const0);
    sum_positive_0_loc_l_U->if_din(Loop_sum_loop_proc_U0_ap_return_0);
    sum_positive_0_loc_l_U->if_full_n(sum_positive_0_loc_l_full_n);
    sum_positive_0_loc_l_U->if_write(ap_channel_done_sum_positive_0_loc_l);
    sum_positive_0_loc_l_U->if_dout(sum_positive_0_loc_l_dout);
    sum_positive_0_loc_l_U->if_empty_n(sum_positive_0_loc_l_empty_n);
    sum_positive_0_loc_l_U->if_read(Block_sin_taylor_ser_U0_ap_ready);
    sum_negative_0_loc_l_U = new fifo_w64_d2_A("sum_negative_0_loc_l_U");
    sum_negative_0_loc_l_U->clk(ap_clk);
    sum_negative_0_loc_l_U->reset(ap_rst);
    sum_negative_0_loc_l_U->if_read_ce(ap_var_for_const0);
    sum_negative_0_loc_l_U->if_write_ce(ap_var_for_const0);
    sum_negative_0_loc_l_U->if_din(Loop_sum_loop_proc_U0_ap_return_1);
    sum_negative_0_loc_l_U->if_full_n(sum_negative_0_loc_l_full_n);
    sum_negative_0_loc_l_U->if_write(ap_channel_done_sum_negative_0_loc_l);
    sum_negative_0_loc_l_U->if_dout(sum_negative_0_loc_l_dout);
    sum_negative_0_loc_l_U->if_empty_n(sum_negative_0_loc_l_empty_n);
    sum_negative_0_loc_l_U->if_read(Block_sin_taylor_ser_U0_ap_ready);
    tmp_loc_channel_U = new fifo_w64_d2_A("tmp_loc_channel_U");
    tmp_loc_channel_U->clk(ap_clk);
    tmp_loc_channel_U->reset(ap_rst);
    tmp_loc_channel_U->if_read_ce(ap_var_for_const0);
    tmp_loc_channel_U->if_write_ce(ap_var_for_const0);
    tmp_loc_channel_U->if_din(Block_sin_taylor_ser_U0_ap_return);
    tmp_loc_channel_U->if_full_n(tmp_loc_channel_full_n);
    tmp_loc_channel_U->if_write(Block_sin_taylor_ser_U0_ap_done);
    tmp_loc_channel_U->if_dout(tmp_loc_channel_dout);
    tmp_loc_channel_U->if_empty_n(tmp_loc_channel_empty_n);
    tmp_loc_channel_U->if_read(p_source_files_sr_U0_ap_ready);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_Block_sin_taylor_ser_U0_ap_continue);
    sensitive << ( tmp_loc_channel_full_n );

    SC_METHOD(thread_Block_sin_taylor_ser_U0_ap_start);
    sensitive << ( sum_positive_0_loc_l_empty_n );
    sensitive << ( sum_negative_0_loc_l_empty_n );

    SC_METHOD(thread_Block_sin_taylor_ser_U0_start_full_n);

    SC_METHOD(thread_Block_sin_taylor_ser_U0_start_write);

    SC_METHOD(thread_Loop_sum_loop_proc_U0_ap_continue);
    sensitive << ( ap_sync_channel_write_sum_negative_0_loc_l );
    sensitive << ( ap_sync_channel_write_sum_positive_0_loc_l );

    SC_METHOD(thread_Loop_sum_loop_proc_U0_ap_start);
    sensitive << ( ap_start );

    SC_METHOD(thread_Loop_sum_loop_proc_U0_start_full_n);

    SC_METHOD(thread_Loop_sum_loop_proc_U0_start_write);

    SC_METHOD(thread_ap_channel_done_sum_negative_0_loc_l);
    sensitive << ( Loop_sum_loop_proc_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_sum_negative_0_loc_l );

    SC_METHOD(thread_ap_channel_done_sum_positive_0_loc_l);
    sensitive << ( Loop_sum_loop_proc_U0_ap_done );
    sensitive << ( ap_sync_reg_channel_write_sum_positive_0_loc_l );

    SC_METHOD(thread_ap_channel_done_tmp_loc_channel);
    sensitive << ( Block_sin_taylor_ser_U0_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( p_source_files_sr_U0_ap_done );

    SC_METHOD(thread_ap_idle);
    sensitive << ( Loop_sum_loop_proc_U0_ap_idle );
    sensitive << ( Block_sin_taylor_ser_U0_ap_idle );
    sensitive << ( p_source_files_sr_U0_ap_idle );
    sensitive << ( sum_positive_0_loc_l_empty_n );
    sensitive << ( sum_negative_0_loc_l_empty_n );
    sensitive << ( tmp_loc_channel_empty_n );

    SC_METHOD(thread_ap_ready);
    sensitive << ( Loop_sum_loop_proc_U0_ap_ready );

    SC_METHOD(thread_ap_return);
    sensitive << ( p_source_files_sr_U0_ap_return );

    SC_METHOD(thread_ap_sync_channel_write_sum_negative_0_loc_l);
    sensitive << ( ap_channel_done_sum_negative_0_loc_l );
    sensitive << ( sum_negative_0_loc_l_full_n );
    sensitive << ( ap_sync_reg_channel_write_sum_negative_0_loc_l );

    SC_METHOD(thread_ap_sync_channel_write_sum_positive_0_loc_l);
    sensitive << ( ap_channel_done_sum_positive_0_loc_l );
    sensitive << ( sum_positive_0_loc_l_full_n );
    sensitive << ( ap_sync_reg_channel_write_sum_positive_0_loc_l );

    SC_METHOD(thread_ap_sync_continue);

    SC_METHOD(thread_ap_sync_done);
    sensitive << ( p_source_files_sr_U0_ap_done );

    SC_METHOD(thread_ap_sync_ready);
    sensitive << ( Loop_sum_loop_proc_U0_ap_ready );

    SC_METHOD(thread_p_source_files_sr_U0_ap_continue);

    SC_METHOD(thread_p_source_files_sr_U0_ap_start);
    sensitive << ( tmp_loc_channel_empty_n );

    SC_METHOD(thread_p_source_files_sr_U0_start_full_n);

    SC_METHOD(thread_p_source_files_sr_U0_start_write);

    SC_METHOD(thread_tmp_p_source_files_sr_fu_42_ap_return);

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_clk.pos() );

    SC_THREAD(thread_ap_var_for_const0);

    ap_sync_reg_channel_write_sum_negative_0_loc_l = SC_LOGIC_0;
    ap_sync_reg_channel_write_sum_positive_0_loc_l = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "sin_taylor_series_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, Loop_sum_loop_proc_U0_ap_start, "Loop_sum_loop_proc_U0_ap_start");
    sc_trace(mVcdFile, Loop_sum_loop_proc_U0_ap_done, "Loop_sum_loop_proc_U0_ap_done");
    sc_trace(mVcdFile, Loop_sum_loop_proc_U0_ap_continue, "Loop_sum_loop_proc_U0_ap_continue");
    sc_trace(mVcdFile, Loop_sum_loop_proc_U0_ap_idle, "Loop_sum_loop_proc_U0_ap_idle");
    sc_trace(mVcdFile, Loop_sum_loop_proc_U0_ap_ready, "Loop_sum_loop_proc_U0_ap_ready");
    sc_trace(mVcdFile, Loop_sum_loop_proc_U0_ap_return_0, "Loop_sum_loop_proc_U0_ap_return_0");
    sc_trace(mVcdFile, Loop_sum_loop_proc_U0_ap_return_1, "Loop_sum_loop_proc_U0_ap_return_1");
    sc_trace(mVcdFile, ap_channel_done_sum_negative_0_loc_l, "ap_channel_done_sum_negative_0_loc_l");
    sc_trace(mVcdFile, sum_negative_0_loc_l_full_n, "sum_negative_0_loc_l_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_sum_negative_0_loc_l, "ap_sync_reg_channel_write_sum_negative_0_loc_l");
    sc_trace(mVcdFile, ap_sync_channel_write_sum_negative_0_loc_l, "ap_sync_channel_write_sum_negative_0_loc_l");
    sc_trace(mVcdFile, ap_channel_done_sum_positive_0_loc_l, "ap_channel_done_sum_positive_0_loc_l");
    sc_trace(mVcdFile, sum_positive_0_loc_l_full_n, "sum_positive_0_loc_l_full_n");
    sc_trace(mVcdFile, ap_sync_reg_channel_write_sum_positive_0_loc_l, "ap_sync_reg_channel_write_sum_positive_0_loc_l");
    sc_trace(mVcdFile, ap_sync_channel_write_sum_positive_0_loc_l, "ap_sync_channel_write_sum_positive_0_loc_l");
    sc_trace(mVcdFile, Block_sin_taylor_ser_U0_ap_start, "Block_sin_taylor_ser_U0_ap_start");
    sc_trace(mVcdFile, Block_sin_taylor_ser_U0_ap_done, "Block_sin_taylor_ser_U0_ap_done");
    sc_trace(mVcdFile, Block_sin_taylor_ser_U0_ap_continue, "Block_sin_taylor_ser_U0_ap_continue");
    sc_trace(mVcdFile, Block_sin_taylor_ser_U0_ap_idle, "Block_sin_taylor_ser_U0_ap_idle");
    sc_trace(mVcdFile, Block_sin_taylor_ser_U0_ap_ready, "Block_sin_taylor_ser_U0_ap_ready");
    sc_trace(mVcdFile, Block_sin_taylor_ser_U0_ap_return, "Block_sin_taylor_ser_U0_ap_return");
    sc_trace(mVcdFile, ap_channel_done_tmp_loc_channel, "ap_channel_done_tmp_loc_channel");
    sc_trace(mVcdFile, tmp_loc_channel_full_n, "tmp_loc_channel_full_n");
    sc_trace(mVcdFile, p_source_files_sr_U0_ap_start, "p_source_files_sr_U0_ap_start");
    sc_trace(mVcdFile, p_source_files_sr_U0_ap_done, "p_source_files_sr_U0_ap_done");
    sc_trace(mVcdFile, p_source_files_sr_U0_ap_continue, "p_source_files_sr_U0_ap_continue");
    sc_trace(mVcdFile, p_source_files_sr_U0_ap_idle, "p_source_files_sr_U0_ap_idle");
    sc_trace(mVcdFile, p_source_files_sr_U0_ap_ready, "p_source_files_sr_U0_ap_ready");
    sc_trace(mVcdFile, p_source_files_sr_U0_ap_return, "p_source_files_sr_U0_ap_return");
    sc_trace(mVcdFile, tmp_p_source_files_sr_fu_42_ap_return, "tmp_p_source_files_sr_fu_42_ap_return");
    sc_trace(mVcdFile, ap_sync_continue, "ap_sync_continue");
    sc_trace(mVcdFile, sum_positive_0_loc_l_dout, "sum_positive_0_loc_l_dout");
    sc_trace(mVcdFile, sum_positive_0_loc_l_empty_n, "sum_positive_0_loc_l_empty_n");
    sc_trace(mVcdFile, sum_negative_0_loc_l_dout, "sum_negative_0_loc_l_dout");
    sc_trace(mVcdFile, sum_negative_0_loc_l_empty_n, "sum_negative_0_loc_l_empty_n");
    sc_trace(mVcdFile, tmp_loc_channel_dout, "tmp_loc_channel_dout");
    sc_trace(mVcdFile, tmp_loc_channel_empty_n, "tmp_loc_channel_empty_n");
    sc_trace(mVcdFile, ap_sync_done, "ap_sync_done");
    sc_trace(mVcdFile, ap_sync_ready, "ap_sync_ready");
    sc_trace(mVcdFile, Loop_sum_loop_proc_U0_start_full_n, "Loop_sum_loop_proc_U0_start_full_n");
    sc_trace(mVcdFile, Loop_sum_loop_proc_U0_start_write, "Loop_sum_loop_proc_U0_start_write");
    sc_trace(mVcdFile, Block_sin_taylor_ser_U0_start_full_n, "Block_sin_taylor_ser_U0_start_full_n");
    sc_trace(mVcdFile, Block_sin_taylor_ser_U0_start_write, "Block_sin_taylor_ser_U0_start_write");
    sc_trace(mVcdFile, p_source_files_sr_U0_start_full_n, "p_source_files_sr_U0_start_full_n");
    sc_trace(mVcdFile, p_source_files_sr_U0_start_write, "p_source_files_sr_U0_start_write");
#endif

    }
    mHdltvinHandle.open("sin_taylor_series.hdltvin.dat");
    mHdltvoutHandle.open("sin_taylor_series.hdltvout.dat");
}

sin_taylor_series::~sin_taylor_series() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
    delete Loop_sum_loop_proc_U0;
    delete Block_sin_taylor_ser_U0;
    delete p_source_files_sr_U0;
    delete sum_positive_0_loc_l_U;
    delete sum_negative_0_loc_l_U;
    delete tmp_loc_channel_U;
}

void sin_taylor_series::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void sin_taylor_series::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_sum_negative_0_loc_l = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (Loop_sum_loop_proc_U0_ap_done.read() & 
             Loop_sum_loop_proc_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_sum_negative_0_loc_l = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_sum_negative_0_loc_l = ap_sync_channel_write_sum_negative_0_loc_l.read();
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_sync_reg_channel_write_sum_positive_0_loc_l = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, (Loop_sum_loop_proc_U0_ap_done.read() & 
             Loop_sum_loop_proc_U0_ap_continue.read()))) {
            ap_sync_reg_channel_write_sum_positive_0_loc_l = ap_const_logic_0;
        } else {
            ap_sync_reg_channel_write_sum_positive_0_loc_l = ap_sync_channel_write_sum_positive_0_loc_l.read();
        }
    }
}

void sin_taylor_series::thread_Block_sin_taylor_ser_U0_ap_continue() {
    Block_sin_taylor_ser_U0_ap_continue = tmp_loc_channel_full_n.read();
}

void sin_taylor_series::thread_Block_sin_taylor_ser_U0_ap_start() {
    Block_sin_taylor_ser_U0_ap_start = (sum_positive_0_loc_l_empty_n.read() & sum_negative_0_loc_l_empty_n.read());
}

void sin_taylor_series::thread_Block_sin_taylor_ser_U0_start_full_n() {
    Block_sin_taylor_ser_U0_start_full_n = ap_const_logic_0;
}

void sin_taylor_series::thread_Block_sin_taylor_ser_U0_start_write() {
    Block_sin_taylor_ser_U0_start_write = ap_const_logic_0;
}

void sin_taylor_series::thread_Loop_sum_loop_proc_U0_ap_continue() {
    Loop_sum_loop_proc_U0_ap_continue = (ap_sync_channel_write_sum_negative_0_loc_l.read() & ap_sync_channel_write_sum_positive_0_loc_l.read());
}

void sin_taylor_series::thread_Loop_sum_loop_proc_U0_ap_start() {
    Loop_sum_loop_proc_U0_ap_start = ap_start.read();
}

void sin_taylor_series::thread_Loop_sum_loop_proc_U0_start_full_n() {
    Loop_sum_loop_proc_U0_start_full_n = ap_const_logic_0;
}

void sin_taylor_series::thread_Loop_sum_loop_proc_U0_start_write() {
    Loop_sum_loop_proc_U0_start_write = ap_const_logic_0;
}

void sin_taylor_series::thread_ap_channel_done_sum_negative_0_loc_l() {
    ap_channel_done_sum_negative_0_loc_l = (Loop_sum_loop_proc_U0_ap_done.read() & (ap_sync_reg_channel_write_sum_negative_0_loc_l.read() ^ 
  ap_const_logic_1));
}

void sin_taylor_series::thread_ap_channel_done_sum_positive_0_loc_l() {
    ap_channel_done_sum_positive_0_loc_l = (Loop_sum_loop_proc_U0_ap_done.read() & (ap_sync_reg_channel_write_sum_positive_0_loc_l.read() ^ 
  ap_const_logic_1));
}

void sin_taylor_series::thread_ap_channel_done_tmp_loc_channel() {
    ap_channel_done_tmp_loc_channel = Block_sin_taylor_ser_U0_ap_done.read();
}

void sin_taylor_series::thread_ap_done() {
    ap_done = p_source_files_sr_U0_ap_done.read();
}

void sin_taylor_series::thread_ap_idle() {
    ap_idle = (Loop_sum_loop_proc_U0_ap_idle.read() & Block_sin_taylor_ser_U0_ap_idle.read() & p_source_files_sr_U0_ap_idle.read() & (sum_positive_0_loc_l_empty_n.read() ^ 
  ap_const_logic_1) & (sum_negative_0_loc_l_empty_n.read() ^ 
  ap_const_logic_1) & (tmp_loc_channel_empty_n.read() ^ 
  ap_const_logic_1));
}

void sin_taylor_series::thread_ap_ready() {
    ap_ready = Loop_sum_loop_proc_U0_ap_ready.read();
}

void sin_taylor_series::thread_ap_return() {
    ap_return = p_source_files_sr_U0_ap_return.read();
}

void sin_taylor_series::thread_ap_sync_channel_write_sum_negative_0_loc_l() {
    ap_sync_channel_write_sum_negative_0_loc_l = ((ap_channel_done_sum_negative_0_loc_l.read() & 
  sum_negative_0_loc_l_full_n.read()) | ap_sync_reg_channel_write_sum_negative_0_loc_l.read());
}

void sin_taylor_series::thread_ap_sync_channel_write_sum_positive_0_loc_l() {
    ap_sync_channel_write_sum_positive_0_loc_l = ((ap_channel_done_sum_positive_0_loc_l.read() & 
  sum_positive_0_loc_l_full_n.read()) | ap_sync_reg_channel_write_sum_positive_0_loc_l.read());
}

void sin_taylor_series::thread_ap_sync_continue() {
    ap_sync_continue = ap_const_logic_1;
}

void sin_taylor_series::thread_ap_sync_done() {
    ap_sync_done = p_source_files_sr_U0_ap_done.read();
}

void sin_taylor_series::thread_ap_sync_ready() {
    ap_sync_ready = Loop_sum_loop_proc_U0_ap_ready.read();
}

void sin_taylor_series::thread_p_source_files_sr_U0_ap_continue() {
    p_source_files_sr_U0_ap_continue = ap_const_logic_1;
}

void sin_taylor_series::thread_p_source_files_sr_U0_ap_start() {
    p_source_files_sr_U0_ap_start = tmp_loc_channel_empty_n.read();
}

void sin_taylor_series::thread_p_source_files_sr_U0_start_full_n() {
    p_source_files_sr_U0_start_full_n = ap_const_logic_0;
}

void sin_taylor_series::thread_p_source_files_sr_U0_start_write() {
    p_source_files_sr_U0_start_write = ap_const_logic_0;
}

void sin_taylor_series::thread_tmp_p_source_files_sr_fu_42_ap_return() {
    tmp_p_source_files_sr_fu_42_ap_return = ap_const_lv64_0;
}

void sin_taylor_series::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"x\" :  \"" << x.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_rst\" :  \"" << ap_rst.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

