// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _Block_sin_taylor_ser_HH_
#define _Block_sin_taylor_ser_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "sin_taylor_seriesfYi.h"

namespace ap_rtl {

struct Block_sin_taylor_ser : public sc_module {
    // Port declarations 10
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_in< sc_logic > ap_continue;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<64> > p_read;
    sc_in< sc_lv<64> > p_read1;
    sc_out< sc_lv<64> > ap_return;


    // Module declarations
    Block_sin_taylor_ser(sc_module_name name);
    SC_HAS_PROCESS(Block_sin_taylor_ser);

    ~Block_sin_taylor_ser();

    sc_trace_file* mVcdFile;

    sin_taylor_seriesfYi<1,5,64,64,64>* sin_taylor_seriesfYi_U12;
    sc_signal< sc_logic > ap_done_reg;
    sc_signal< sc_lv<5> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< bool > ap_block_state1;
    sc_signal< sc_lv<64> > grp_fu_18_p2;
    sc_signal< sc_logic > grp_fu_18_ce;
    sc_signal< sc_logic > ap_CS_fsm_state5;
    sc_signal< sc_lv<64> > ap_return_preg;
    sc_signal< sc_lv<5> > ap_NS_fsm;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<5> ap_ST_fsm_state1;
    static const sc_lv<5> ap_ST_fsm_state2;
    static const sc_lv<5> ap_ST_fsm_state3;
    static const sc_lv<5> ap_ST_fsm_state4;
    static const sc_lv<5> ap_ST_fsm_state5;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<64> ap_const_lv64_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state5();
    void thread_ap_block_state1();
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_grp_fu_18_ce();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
