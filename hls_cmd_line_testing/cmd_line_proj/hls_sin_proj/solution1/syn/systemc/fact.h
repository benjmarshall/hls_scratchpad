// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _fact_HH_
#define _fact_HH_

#include "systemc.h"
#include "AESL_pkg.h"

#include "sin_taylor_seriesbkb.h"
#include "sin_taylor_seriescud.h"

namespace ap_rtl {

struct fact : public sc_module {
    // Port declarations 8
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<5> > x;
    sc_out< sc_lv<64> > ap_return;
    sc_signal< sc_logic > ap_var_for_const0;


    // Module declarations
    fact(sc_module_name name);
    SC_HAS_PROCESS(fact);

    ~fact();

    sc_trace_file* mVcdFile;

    sin_taylor_seriesbkb<1,6,64,64,64>* sin_taylor_seriesbkb_x_U4;
    sin_taylor_seriescud<1,6,32,64>* sin_taylor_seriescud_U5;
    sc_signal< sc_lv<8> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<64> > result_int_reg_38;
    sc_signal< sc_lv<6> > i_reg_50;
    sc_signal< sc_lv<6> > tmp_3_fu_73_p2;
    sc_signal< sc_lv<6> > tmp_3_reg_95;
    sc_signal< sc_lv<1> > exitcond_fu_79_p2;
    sc_signal< sc_lv<1> > exitcond_reg_100;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state8_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_flag00011001;
    sc_signal< sc_lv<1> > ap_reg_pp0_iter1_exitcond_reg_100;
    sc_signal< sc_lv<6> > i_2_fu_89_p2;
    sc_signal< sc_lv<6> > i_2_reg_109;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< sc_lv<64> > grp_fu_66_p1;
    sc_signal< sc_lv<64> > tmp_s_reg_114;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage5;
    sc_signal< bool > ap_block_state7_pp0_stage5_iter0;
    sc_signal< bool > ap_block_state13_pp0_stage5_iter1;
    sc_signal< bool > ap_block_pp0_stage5_flag00011001;
    sc_signal< sc_lv<64> > grp_fu_61_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_flag00011011;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< bool > ap_block_pp0_stage5_flag00011011;
    sc_signal< sc_lv<6> > i_phi_fu_54_p4;
    sc_signal< bool > ap_block_pp0_stage0_flag00000000;
    sc_signal< sc_lv<32> > grp_fu_66_p0;
    sc_signal< sc_lv<6> > tmp_cast_fu_69_p1;
    sc_signal< sc_logic > ap_CS_fsm_state14;
    sc_signal< sc_lv<8> > ap_NS_fsm;
    sc_signal< bool > ap_block_state3_pp0_stage1_iter0;
    sc_signal< bool > ap_block_state9_pp0_stage1_iter1;
    sc_signal< bool > ap_block_pp0_stage1_flag00011011;
    sc_signal< bool > ap_block_state4_pp0_stage2_iter0;
    sc_signal< bool > ap_block_state10_pp0_stage2_iter1;
    sc_signal< bool > ap_block_pp0_stage2_flag00011011;
    sc_signal< bool > ap_block_state5_pp0_stage3_iter0;
    sc_signal< bool > ap_block_state11_pp0_stage3_iter1;
    sc_signal< bool > ap_block_pp0_stage3_flag00011011;
    sc_signal< bool > ap_block_state6_pp0_stage4_iter0;
    sc_signal< bool > ap_block_state12_pp0_stage4_iter1;
    sc_signal< bool > ap_block_pp0_stage4_flag00011011;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<8> ap_ST_fsm_state1;
    static const sc_lv<8> ap_ST_fsm_pp0_stage0;
    static const sc_lv<8> ap_ST_fsm_pp0_stage1;
    static const sc_lv<8> ap_ST_fsm_pp0_stage2;
    static const sc_lv<8> ap_ST_fsm_pp0_stage3;
    static const sc_lv<8> ap_ST_fsm_pp0_stage4;
    static const sc_lv<8> ap_ST_fsm_pp0_stage5;
    static const sc_lv<8> ap_ST_fsm_state14;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_6;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<64> ap_const_lv64_3FF0000000000000;
    static const sc_lv<6> ap_const_lv6_1;
    static const sc_lv<32> ap_const_lv32_7;
    // Thread declarations
    void thread_ap_var_for_const0();
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_pp0_stage5();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state14();
    void thread_ap_block_pp0_stage0_flag00000000();
    void thread_ap_block_pp0_stage0_flag00011001();
    void thread_ap_block_pp0_stage0_flag00011011();
    void thread_ap_block_pp0_stage1_flag00011011();
    void thread_ap_block_pp0_stage2_flag00011011();
    void thread_ap_block_pp0_stage3_flag00011011();
    void thread_ap_block_pp0_stage4_flag00011011();
    void thread_ap_block_pp0_stage5_flag00011001();
    void thread_ap_block_pp0_stage5_flag00011011();
    void thread_ap_block_state10_pp0_stage2_iter1();
    void thread_ap_block_state11_pp0_stage3_iter1();
    void thread_ap_block_state12_pp0_stage4_iter1();
    void thread_ap_block_state13_pp0_stage5_iter1();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage1_iter0();
    void thread_ap_block_state4_pp0_stage2_iter0();
    void thread_ap_block_state5_pp0_stage3_iter0();
    void thread_ap_block_state6_pp0_stage4_iter0();
    void thread_ap_block_state7_pp0_stage5_iter0();
    void thread_ap_block_state8_pp0_stage0_iter1();
    void thread_ap_block_state9_pp0_stage1_iter1();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_exitcond_fu_79_p2();
    void thread_grp_fu_66_p0();
    void thread_i_2_fu_89_p2();
    void thread_i_phi_fu_54_p4();
    void thread_tmp_3_fu_73_p2();
    void thread_tmp_cast_fu_69_p1();
    void thread_ap_NS_fsm();
};

}

using namespace ap_rtl;

#endif
