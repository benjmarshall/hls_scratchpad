-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2017.1
-- Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity sin_taylor_series is
port (
    x : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0);
    ap_done : OUT STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC );
end;


architecture behav of sin_taylor_series is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "sin_taylor_series,hls_ip_2017_1,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=1,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xc7z020clg484-1,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=dataflow,HLS_SYN_CLOCK=8.621000,HLS_SYN_LAT=-1,HLS_SYN_TPT=-1,HLS_SYN_MEM=0,HLS_SYN_DSP=53,HLS_SYN_FF=10797,HLS_SYN_LUT=15153}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal Loop_sum_loop_proc_U0_ap_start : STD_LOGIC;
    signal Loop_sum_loop_proc_U0_ap_done : STD_LOGIC;
    signal Loop_sum_loop_proc_U0_ap_continue : STD_LOGIC;
    signal Loop_sum_loop_proc_U0_ap_idle : STD_LOGIC;
    signal Loop_sum_loop_proc_U0_ap_ready : STD_LOGIC;
    signal Loop_sum_loop_proc_U0_ap_return_0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Loop_sum_loop_proc_U0_ap_return_1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_channel_done_sum_negative_0_loc_l : STD_LOGIC;
    signal sum_negative_0_loc_l_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_sum_negative_0_loc_l : STD_LOGIC := '0';
    signal ap_sync_channel_write_sum_negative_0_loc_l : STD_LOGIC;
    signal ap_channel_done_sum_positive_0_loc_l : STD_LOGIC;
    signal sum_positive_0_loc_l_full_n : STD_LOGIC;
    signal ap_sync_reg_channel_write_sum_positive_0_loc_l : STD_LOGIC := '0';
    signal ap_sync_channel_write_sum_positive_0_loc_l : STD_LOGIC;
    signal Block_sin_taylor_ser_U0_ap_start : STD_LOGIC;
    signal Block_sin_taylor_ser_U0_ap_done : STD_LOGIC;
    signal Block_sin_taylor_ser_U0_ap_continue : STD_LOGIC;
    signal Block_sin_taylor_ser_U0_ap_idle : STD_LOGIC;
    signal Block_sin_taylor_ser_U0_ap_ready : STD_LOGIC;
    signal Block_sin_taylor_ser_U0_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_channel_done_tmp_loc_channel : STD_LOGIC;
    signal tmp_loc_channel_full_n : STD_LOGIC;
    signal p_source_files_sr_U0_ap_start : STD_LOGIC;
    signal p_source_files_sr_U0_ap_done : STD_LOGIC;
    signal p_source_files_sr_U0_ap_continue : STD_LOGIC;
    signal p_source_files_sr_U0_ap_idle : STD_LOGIC;
    signal p_source_files_sr_U0_ap_ready : STD_LOGIC;
    signal p_source_files_sr_U0_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_p_source_files_sr_fu_42_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_sync_continue : STD_LOGIC;
    signal sum_positive_0_loc_l_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_positive_0_loc_l_empty_n : STD_LOGIC;
    signal sum_negative_0_loc_l_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_negative_0_loc_l_empty_n : STD_LOGIC;
    signal tmp_loc_channel_dout : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_loc_channel_empty_n : STD_LOGIC;
    signal ap_sync_done : STD_LOGIC;
    signal ap_sync_ready : STD_LOGIC;
    signal Loop_sum_loop_proc_U0_start_full_n : STD_LOGIC;
    signal Loop_sum_loop_proc_U0_start_write : STD_LOGIC;
    signal Block_sin_taylor_ser_U0_start_full_n : STD_LOGIC;
    signal Block_sin_taylor_ser_U0_start_write : STD_LOGIC;
    signal p_source_files_sr_U0_start_full_n : STD_LOGIC;
    signal p_source_files_sr_U0_start_write : STD_LOGIC;

    component Loop_sum_loop_proc IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        x : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return_0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        ap_return_1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component Block_sin_taylor_ser IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (63 downto 0);
        p_read1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component p_source_files_sr IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_continue : IN STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        p_read : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component fifo_w64_d2_A IS
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        if_read_ce : IN STD_LOGIC;
        if_write_ce : IN STD_LOGIC;
        if_din : IN STD_LOGIC_VECTOR (63 downto 0);
        if_full_n : OUT STD_LOGIC;
        if_write : IN STD_LOGIC;
        if_dout : OUT STD_LOGIC_VECTOR (63 downto 0);
        if_empty_n : OUT STD_LOGIC;
        if_read : IN STD_LOGIC );
    end component;



begin
    Loop_sum_loop_proc_U0 : component Loop_sum_loop_proc
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Loop_sum_loop_proc_U0_ap_start,
        ap_done => Loop_sum_loop_proc_U0_ap_done,
        ap_continue => Loop_sum_loop_proc_U0_ap_continue,
        ap_idle => Loop_sum_loop_proc_U0_ap_idle,
        ap_ready => Loop_sum_loop_proc_U0_ap_ready,
        x => x,
        ap_return_0 => Loop_sum_loop_proc_U0_ap_return_0,
        ap_return_1 => Loop_sum_loop_proc_U0_ap_return_1);

    Block_sin_taylor_ser_U0 : component Block_sin_taylor_ser
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => Block_sin_taylor_ser_U0_ap_start,
        ap_done => Block_sin_taylor_ser_U0_ap_done,
        ap_continue => Block_sin_taylor_ser_U0_ap_continue,
        ap_idle => Block_sin_taylor_ser_U0_ap_idle,
        ap_ready => Block_sin_taylor_ser_U0_ap_ready,
        p_read => sum_positive_0_loc_l_dout,
        p_read1 => sum_negative_0_loc_l_dout,
        ap_return => Block_sin_taylor_ser_U0_ap_return);

    p_source_files_sr_U0 : component p_source_files_sr
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => p_source_files_sr_U0_ap_start,
        ap_done => p_source_files_sr_U0_ap_done,
        ap_continue => p_source_files_sr_U0_ap_continue,
        ap_idle => p_source_files_sr_U0_ap_idle,
        ap_ready => p_source_files_sr_U0_ap_ready,
        p_read => tmp_loc_channel_dout,
        ap_return => p_source_files_sr_U0_ap_return);

    sum_positive_0_loc_l_U : component fifo_w64_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_sum_loop_proc_U0_ap_return_0,
        if_full_n => sum_positive_0_loc_l_full_n,
        if_write => ap_channel_done_sum_positive_0_loc_l,
        if_dout => sum_positive_0_loc_l_dout,
        if_empty_n => sum_positive_0_loc_l_empty_n,
        if_read => Block_sin_taylor_ser_U0_ap_ready);

    sum_negative_0_loc_l_U : component fifo_w64_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Loop_sum_loop_proc_U0_ap_return_1,
        if_full_n => sum_negative_0_loc_l_full_n,
        if_write => ap_channel_done_sum_negative_0_loc_l,
        if_dout => sum_negative_0_loc_l_dout,
        if_empty_n => sum_negative_0_loc_l_empty_n,
        if_read => Block_sin_taylor_ser_U0_ap_ready);

    tmp_loc_channel_U : component fifo_w64_d2_A
    port map (
        clk => ap_clk,
        reset => ap_rst,
        if_read_ce => ap_const_logic_1,
        if_write_ce => ap_const_logic_1,
        if_din => Block_sin_taylor_ser_U0_ap_return,
        if_full_n => tmp_loc_channel_full_n,
        if_write => Block_sin_taylor_ser_U0_ap_done,
        if_dout => tmp_loc_channel_dout,
        if_empty_n => tmp_loc_channel_empty_n,
        if_read => p_source_files_sr_U0_ap_ready);





    ap_sync_reg_channel_write_sum_negative_0_loc_l_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_sum_negative_0_loc_l <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (Loop_sum_loop_proc_U0_ap_done and Loop_sum_loop_proc_U0_ap_continue))) then 
                    ap_sync_reg_channel_write_sum_negative_0_loc_l <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_sum_negative_0_loc_l <= ap_sync_channel_write_sum_negative_0_loc_l;
                end if; 
            end if;
        end if;
    end process;


    ap_sync_reg_channel_write_sum_positive_0_loc_l_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_sync_reg_channel_write_sum_positive_0_loc_l <= ap_const_logic_0;
            else
                if ((ap_const_logic_1 = (Loop_sum_loop_proc_U0_ap_done and Loop_sum_loop_proc_U0_ap_continue))) then 
                    ap_sync_reg_channel_write_sum_positive_0_loc_l <= ap_const_logic_0;
                else 
                    ap_sync_reg_channel_write_sum_positive_0_loc_l <= ap_sync_channel_write_sum_positive_0_loc_l;
                end if; 
            end if;
        end if;
    end process;

    Block_sin_taylor_ser_U0_ap_continue <= tmp_loc_channel_full_n;
    Block_sin_taylor_ser_U0_ap_start <= (sum_positive_0_loc_l_empty_n and sum_negative_0_loc_l_empty_n);
    Block_sin_taylor_ser_U0_start_full_n <= ap_const_logic_0;
    Block_sin_taylor_ser_U0_start_write <= ap_const_logic_0;
    Loop_sum_loop_proc_U0_ap_continue <= (ap_sync_channel_write_sum_negative_0_loc_l and ap_sync_channel_write_sum_positive_0_loc_l);
    Loop_sum_loop_proc_U0_ap_start <= ap_start;
    Loop_sum_loop_proc_U0_start_full_n <= ap_const_logic_0;
    Loop_sum_loop_proc_U0_start_write <= ap_const_logic_0;
    ap_channel_done_sum_negative_0_loc_l <= (Loop_sum_loop_proc_U0_ap_done and (ap_sync_reg_channel_write_sum_negative_0_loc_l xor ap_const_logic_1));
    ap_channel_done_sum_positive_0_loc_l <= (Loop_sum_loop_proc_U0_ap_done and (ap_sync_reg_channel_write_sum_positive_0_loc_l xor ap_const_logic_1));
    ap_channel_done_tmp_loc_channel <= Block_sin_taylor_ser_U0_ap_done;
    ap_done <= p_source_files_sr_U0_ap_done;
    ap_idle <= (Loop_sum_loop_proc_U0_ap_idle and Block_sin_taylor_ser_U0_ap_idle and p_source_files_sr_U0_ap_idle and (sum_positive_0_loc_l_empty_n xor ap_const_logic_1) and (sum_negative_0_loc_l_empty_n xor ap_const_logic_1) and (tmp_loc_channel_empty_n xor ap_const_logic_1));
    ap_ready <= Loop_sum_loop_proc_U0_ap_ready;
    ap_return <= p_source_files_sr_U0_ap_return;
    ap_sync_channel_write_sum_negative_0_loc_l <= ((ap_channel_done_sum_negative_0_loc_l and sum_negative_0_loc_l_full_n) or ap_sync_reg_channel_write_sum_negative_0_loc_l);
    ap_sync_channel_write_sum_positive_0_loc_l <= ((ap_channel_done_sum_positive_0_loc_l and sum_positive_0_loc_l_full_n) or ap_sync_reg_channel_write_sum_positive_0_loc_l);
    ap_sync_continue <= ap_const_logic_1;
    ap_sync_done <= p_source_files_sr_U0_ap_done;
    ap_sync_ready <= Loop_sum_loop_proc_U0_ap_ready;
    p_source_files_sr_U0_ap_continue <= ap_const_logic_1;
    p_source_files_sr_U0_ap_start <= tmp_loc_channel_empty_n;
    p_source_files_sr_U0_start_full_n <= ap_const_logic_0;
    p_source_files_sr_U0_start_write <= ap_const_logic_0;
    tmp_p_source_files_sr_fu_42_ap_return <= ap_const_lv64_0;
end behav;
