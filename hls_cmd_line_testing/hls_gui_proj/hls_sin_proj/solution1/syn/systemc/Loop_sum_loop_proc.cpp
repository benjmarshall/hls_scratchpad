// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2017.1
// Copyright (C) 1986-2017 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "Loop_sum_loop_proc.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic Loop_sum_loop_proc::ap_const_logic_1 = sc_dt::Log_1;
const sc_logic Loop_sum_loop_proc::ap_const_logic_0 = sc_dt::Log_0;
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state1 = "1";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state2 = "10";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state3 = "100";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state4 = "1000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state5 = "10000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state6 = "100000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state7 = "1000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state8 = "10000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state9 = "100000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state10 = "1000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state11 = "10000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state12 = "100000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state13 = "1000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state14 = "10000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state15 = "100000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state16 = "1000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state17 = "10000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state18 = "100000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state19 = "1000000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state20 = "10000000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state21 = "100000000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state22 = "1000000000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state23 = "10000000000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state24 = "100000000000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state25 = "1000000000000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state26 = "10000000000000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state27 = "100000000000000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state28 = "1000000000000000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state29 = "10000000000000000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state30 = "100000000000000000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state31 = "1000000000000000000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state32 = "10000000000000000000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state33 = "100000000000000000000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state34 = "1000000000000000000000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state35 = "10000000000000000000000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state36 = "100000000000000000000000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state37 = "1000000000000000000000000000000000000";
const sc_lv<38> Loop_sum_loop_proc::ap_ST_fsm_state38 = "10000000000000000000000000000000000000";
const sc_lv<32> Loop_sum_loop_proc::ap_const_lv32_0 = "00000000000000000000000000000000";
const bool Loop_sum_loop_proc::ap_const_boolean_1 = true;
const sc_lv<32> Loop_sum_loop_proc::ap_const_lv32_1 = "1";
const sc_lv<1> Loop_sum_loop_proc::ap_const_lv1_1 = "1";
const sc_lv<32> Loop_sum_loop_proc::ap_const_lv32_2 = "10";
const bool Loop_sum_loop_proc::ap_const_boolean_0 = false;
const sc_lv<32> Loop_sum_loop_proc::ap_const_lv32_20 = "100000";
const sc_lv<32> Loop_sum_loop_proc::ap_const_lv32_25 = "100101";
const sc_lv<64> Loop_sum_loop_proc::ap_const_lv64_0 = "0000000000000000000000000000000000000000000000000000000000000000";
const sc_lv<5> Loop_sum_loop_proc::ap_const_lv5_1 = "1";
const sc_lv<32> Loop_sum_loop_proc::ap_const_lv32_21 = "100001";
const sc_lv<5> Loop_sum_loop_proc::ap_const_lv5_15 = "10101";
const sc_lv<5> Loop_sum_loop_proc::ap_const_lv5_2 = "10";
const sc_lv<5> Loop_sum_loop_proc::ap_const_lv5_4 = "100";
const sc_lv<32> Loop_sum_loop_proc::ap_const_lv32_22 = "100010";
const sc_lv<32> Loop_sum_loop_proc::ap_const_lv32_23 = "100011";
const sc_lv<32> Loop_sum_loop_proc::ap_const_lv32_24 = "100100";
const sc_lv<1> Loop_sum_loop_proc::ap_const_lv1_0 = "0";

Loop_sum_loop_proc::Loop_sum_loop_proc(sc_module_name name) : sc_module(name), mVcdFile(0) {
    grp_fact_fu_70 = new fact("grp_fact_fu_70");
    grp_fact_fu_70->ap_clk(ap_clk);
    grp_fact_fu_70->ap_rst(ap_rst);
    grp_fact_fu_70->ap_start(grp_fact_fu_70_ap_start);
    grp_fact_fu_70->ap_done(grp_fact_fu_70_ap_done);
    grp_fact_fu_70->ap_idle(grp_fact_fu_70_ap_idle);
    grp_fact_fu_70->ap_ready(grp_fact_fu_70_ap_ready);
    grp_fact_fu_70->x(i_0_i_i_reg_58);
    grp_fact_fu_70->ap_return(grp_fact_fu_70_ap_return);
    grp_fact_fu_76 = new fact("grp_fact_fu_76");
    grp_fact_fu_76->ap_clk(ap_clk);
    grp_fact_fu_76->ap_rst(ap_rst);
    grp_fact_fu_76->ap_start(grp_fact_fu_76_ap_start);
    grp_fact_fu_76->ap_done(grp_fact_fu_76_ap_done);
    grp_fact_fu_76->ap_idle(grp_fact_fu_76_ap_idle);
    grp_fact_fu_76->ap_ready(grp_fact_fu_76_ap_ready);
    grp_fact_fu_76->x(tmp_5_i_reg_157);
    grp_fact_fu_76->ap_return(grp_fact_fu_76_ap_return);
    grp_power_fu_81 = new power("grp_power_fu_81");
    grp_power_fu_81->ap_clk(ap_clk);
    grp_power_fu_81->ap_rst(ap_rst);
    grp_power_fu_81->ap_start(grp_power_fu_81_ap_start);
    grp_power_fu_81->ap_done(grp_power_fu_81_ap_done);
    grp_power_fu_81->ap_idle(grp_power_fu_81_ap_idle);
    grp_power_fu_81->ap_ready(grp_power_fu_81_ap_ready);
    grp_power_fu_81->x(x);
    grp_power_fu_81->y(i_0_i_i_reg_58);
    grp_power_fu_81->ap_return(grp_power_fu_81_ap_return);
    grp_power_fu_88 = new power("grp_power_fu_88");
    grp_power_fu_88->ap_clk(ap_clk);
    grp_power_fu_88->ap_rst(ap_rst);
    grp_power_fu_88->ap_start(grp_power_fu_88_ap_start);
    grp_power_fu_88->ap_done(grp_power_fu_88_ap_done);
    grp_power_fu_88->ap_idle(grp_power_fu_88_ap_idle);
    grp_power_fu_88->ap_ready(grp_power_fu_88_ap_ready);
    grp_power_fu_88->x(x);
    grp_power_fu_88->y(tmp_5_i_reg_157);
    grp_power_fu_88->ap_return(grp_power_fu_88_ap_return);
    sin_taylor_seriesdEe_U7 = new sin_taylor_seriesdEe<1,5,64,64,64>("sin_taylor_seriesdEe_U7");
    sin_taylor_seriesdEe_U7->clk(ap_clk);
    sin_taylor_seriesdEe_U7->reset(ap_rst);
    sin_taylor_seriesdEe_U7->din0(sum_positive_0_loc_l_reg_34);
    sin_taylor_seriesdEe_U7->din1(tmp_3_i_reg_188);
    sin_taylor_seriesdEe_U7->ce(ap_var_for_const0);
    sin_taylor_seriesdEe_U7->dout(grp_fu_94_p2);
    sin_taylor_seriesdEe_U8 = new sin_taylor_seriesdEe<1,5,64,64,64>("sin_taylor_seriesdEe_U8");
    sin_taylor_seriesdEe_U8->clk(ap_clk);
    sin_taylor_seriesdEe_U8->reset(ap_rst);
    sin_taylor_seriesdEe_U8->din0(sum_negative_0_loc_l_reg_46);
    sin_taylor_seriesdEe_U8->din1(tmp_8_i_reg_193);
    sin_taylor_seriesdEe_U8->ce(ap_var_for_const0);
    sin_taylor_seriesdEe_U8->dout(grp_fu_99_p2);
    sin_taylor_serieseOg_U9 = new sin_taylor_serieseOg<1,31,64,64,64>("sin_taylor_serieseOg_U9");
    sin_taylor_serieseOg_U9->clk(ap_clk);
    sin_taylor_serieseOg_U9->reset(ap_rst);
    sin_taylor_serieseOg_U9->din0(grp_power_fu_81_ap_return);
    sin_taylor_serieseOg_U9->din1(grp_fact_fu_70_ap_return);
    sin_taylor_serieseOg_U9->ce(grp_fu_104_ce);
    sin_taylor_serieseOg_U9->dout(grp_fu_104_p2);
    sin_taylor_serieseOg_U10 = new sin_taylor_serieseOg<1,31,64,64,64>("sin_taylor_serieseOg_U10");
    sin_taylor_serieseOg_U10->clk(ap_clk);
    sin_taylor_serieseOg_U10->reset(ap_rst);
    sin_taylor_serieseOg_U10->din0(grp_power_fu_88_ap_return);
    sin_taylor_serieseOg_U10->din1(grp_fact_fu_76_ap_return);
    sin_taylor_serieseOg_U10->ce(grp_fu_110_ce);
    sin_taylor_serieseOg_U10->dout(grp_fu_110_p2);

    SC_METHOD(thread_ap_clk_no_reset_);
    dont_initialize();
    sensitive << ( ap_clk.pos() );

    SC_METHOD(thread_ap_CS_fsm_state1);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state2);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state3);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state33);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state34);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state35);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state36);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state37);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_CS_fsm_state38);
    sensitive << ( ap_CS_fsm );

    SC_METHOD(thread_ap_block_state1);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );

    SC_METHOD(thread_ap_block_state3_on_subcall_done);
    sensitive << ( grp_power_fu_81_ap_done );
    sensitive << ( grp_fact_fu_70_ap_done );
    sensitive << ( grp_power_fu_88_ap_done );
    sensitive << ( grp_fact_fu_76_ap_done );

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_116_p2 );

    SC_METHOD(thread_ap_idle);
    sensitive << ( ap_start );
    sensitive << ( ap_CS_fsm_state1 );

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_116_p2 );

    SC_METHOD(thread_ap_return_0);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_116_p2 );
    sensitive << ( sum_positive_0_loc_l_reg_34 );

    SC_METHOD(thread_ap_return_1);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_116_p2 );
    sensitive << ( sum_negative_0_loc_l_reg_46 );

    SC_METHOD(thread_grp_fact_fu_70_ap_start);
    sensitive << ( ap_reg_grp_fact_fu_70_ap_start );

    SC_METHOD(thread_grp_fact_fu_76_ap_start);
    sensitive << ( ap_reg_grp_fact_fu_76_ap_start );

    SC_METHOD(thread_grp_fu_104_ce);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state3_on_subcall_done );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );

    SC_METHOD(thread_grp_fu_110_ce);
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state3_on_subcall_done );
    sensitive << ( ap_CS_fsm_state38 );
    sensitive << ( ap_CS_fsm_state34 );
    sensitive << ( ap_CS_fsm_state35 );
    sensitive << ( ap_CS_fsm_state36 );
    sensitive << ( ap_CS_fsm_state37 );

    SC_METHOD(thread_grp_power_fu_81_ap_start);
    sensitive << ( ap_reg_grp_power_fu_81_ap_start );

    SC_METHOD(thread_grp_power_fu_88_ap_start);
    sensitive << ( ap_reg_grp_power_fu_88_ap_start );

    SC_METHOD(thread_i_fu_130_p2);
    sensitive << ( i_0_i_i_reg_58 );

    SC_METHOD(thread_tmp_5_i_fu_122_p2);
    sensitive << ( i_0_i_i_reg_58 );

    SC_METHOD(thread_tmp_i_fu_116_p2);
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( i_0_i_i_reg_58 );

    SC_METHOD(thread_ap_NS_fsm);
    sensitive << ( ap_start );
    sensitive << ( ap_done_reg );
    sensitive << ( ap_CS_fsm );
    sensitive << ( ap_CS_fsm_state1 );
    sensitive << ( ap_CS_fsm_state2 );
    sensitive << ( tmp_i_fu_116_p2 );
    sensitive << ( ap_CS_fsm_state3 );
    sensitive << ( ap_block_state3_on_subcall_done );

    SC_THREAD(thread_ap_var_for_const0);

    ap_done_reg = SC_LOGIC_0;
    ap_CS_fsm = "00000000000000000000000000000000000001";
    ap_reg_grp_fact_fu_70_ap_start = SC_LOGIC_0;
    ap_reg_grp_fact_fu_76_ap_start = SC_LOGIC_0;
    ap_reg_grp_power_fu_81_ap_start = SC_LOGIC_0;
    ap_reg_grp_power_fu_88_ap_start = SC_LOGIC_0;
    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "Loop_sum_loop_proc_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT_HIER__
    sc_trace(mVcdFile, ap_clk, "(port)ap_clk");
    sc_trace(mVcdFile, ap_rst, "(port)ap_rst");
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_continue, "(port)ap_continue");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, x, "(port)x");
    sc_trace(mVcdFile, ap_return_0, "(port)ap_return_0");
    sc_trace(mVcdFile, ap_return_1, "(port)ap_return_1");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, ap_done_reg, "ap_done_reg");
    sc_trace(mVcdFile, ap_CS_fsm, "ap_CS_fsm");
    sc_trace(mVcdFile, ap_CS_fsm_state1, "ap_CS_fsm_state1");
    sc_trace(mVcdFile, ap_block_state1, "ap_block_state1");
    sc_trace(mVcdFile, tmp_5_i_fu_122_p2, "tmp_5_i_fu_122_p2");
    sc_trace(mVcdFile, tmp_5_i_reg_157, "tmp_5_i_reg_157");
    sc_trace(mVcdFile, ap_CS_fsm_state2, "ap_CS_fsm_state2");
    sc_trace(mVcdFile, tmp_i_fu_116_p2, "tmp_i_fu_116_p2");
    sc_trace(mVcdFile, i_fu_130_p2, "i_fu_130_p2");
    sc_trace(mVcdFile, i_reg_163, "i_reg_163");
    sc_trace(mVcdFile, grp_power_fu_81_ap_return, "grp_power_fu_81_ap_return");
    sc_trace(mVcdFile, ap_CS_fsm_state3, "ap_CS_fsm_state3");
    sc_trace(mVcdFile, grp_power_fu_81_ap_done, "grp_power_fu_81_ap_done");
    sc_trace(mVcdFile, grp_fact_fu_70_ap_done, "grp_fact_fu_70_ap_done");
    sc_trace(mVcdFile, grp_power_fu_88_ap_done, "grp_power_fu_88_ap_done");
    sc_trace(mVcdFile, grp_fact_fu_76_ap_done, "grp_fact_fu_76_ap_done");
    sc_trace(mVcdFile, ap_block_state3_on_subcall_done, "ap_block_state3_on_subcall_done");
    sc_trace(mVcdFile, grp_fact_fu_70_ap_return, "grp_fact_fu_70_ap_return");
    sc_trace(mVcdFile, grp_power_fu_88_ap_return, "grp_power_fu_88_ap_return");
    sc_trace(mVcdFile, grp_fact_fu_76_ap_return, "grp_fact_fu_76_ap_return");
    sc_trace(mVcdFile, grp_fu_104_p2, "grp_fu_104_p2");
    sc_trace(mVcdFile, tmp_3_i_reg_188, "tmp_3_i_reg_188");
    sc_trace(mVcdFile, ap_CS_fsm_state33, "ap_CS_fsm_state33");
    sc_trace(mVcdFile, grp_fu_110_p2, "grp_fu_110_p2");
    sc_trace(mVcdFile, tmp_8_i_reg_193, "tmp_8_i_reg_193");
    sc_trace(mVcdFile, grp_fu_94_p2, "grp_fu_94_p2");
    sc_trace(mVcdFile, ap_CS_fsm_state38, "ap_CS_fsm_state38");
    sc_trace(mVcdFile, grp_fu_99_p2, "grp_fu_99_p2");
    sc_trace(mVcdFile, grp_fact_fu_70_ap_start, "grp_fact_fu_70_ap_start");
    sc_trace(mVcdFile, grp_fact_fu_70_ap_idle, "grp_fact_fu_70_ap_idle");
    sc_trace(mVcdFile, grp_fact_fu_70_ap_ready, "grp_fact_fu_70_ap_ready");
    sc_trace(mVcdFile, grp_fact_fu_76_ap_start, "grp_fact_fu_76_ap_start");
    sc_trace(mVcdFile, grp_fact_fu_76_ap_idle, "grp_fact_fu_76_ap_idle");
    sc_trace(mVcdFile, grp_fact_fu_76_ap_ready, "grp_fact_fu_76_ap_ready");
    sc_trace(mVcdFile, grp_power_fu_81_ap_start, "grp_power_fu_81_ap_start");
    sc_trace(mVcdFile, grp_power_fu_81_ap_idle, "grp_power_fu_81_ap_idle");
    sc_trace(mVcdFile, grp_power_fu_81_ap_ready, "grp_power_fu_81_ap_ready");
    sc_trace(mVcdFile, grp_power_fu_88_ap_start, "grp_power_fu_88_ap_start");
    sc_trace(mVcdFile, grp_power_fu_88_ap_idle, "grp_power_fu_88_ap_idle");
    sc_trace(mVcdFile, grp_power_fu_88_ap_ready, "grp_power_fu_88_ap_ready");
    sc_trace(mVcdFile, sum_positive_0_loc_l_reg_34, "sum_positive_0_loc_l_reg_34");
    sc_trace(mVcdFile, sum_negative_0_loc_l_reg_46, "sum_negative_0_loc_l_reg_46");
    sc_trace(mVcdFile, i_0_i_i_reg_58, "i_0_i_i_reg_58");
    sc_trace(mVcdFile, ap_reg_grp_fact_fu_70_ap_start, "ap_reg_grp_fact_fu_70_ap_start");
    sc_trace(mVcdFile, ap_reg_grp_fact_fu_76_ap_start, "ap_reg_grp_fact_fu_76_ap_start");
    sc_trace(mVcdFile, ap_reg_grp_power_fu_81_ap_start, "ap_reg_grp_power_fu_81_ap_start");
    sc_trace(mVcdFile, ap_reg_grp_power_fu_88_ap_start, "ap_reg_grp_power_fu_88_ap_start");
    sc_trace(mVcdFile, ap_CS_fsm_state34, "ap_CS_fsm_state34");
    sc_trace(mVcdFile, grp_fu_104_ce, "grp_fu_104_ce");
    sc_trace(mVcdFile, ap_CS_fsm_state35, "ap_CS_fsm_state35");
    sc_trace(mVcdFile, ap_CS_fsm_state36, "ap_CS_fsm_state36");
    sc_trace(mVcdFile, ap_CS_fsm_state37, "ap_CS_fsm_state37");
    sc_trace(mVcdFile, grp_fu_110_ce, "grp_fu_110_ce");
    sc_trace(mVcdFile, ap_NS_fsm, "ap_NS_fsm");
#endif

    }
}

Loop_sum_loop_proc::~Loop_sum_loop_proc() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    delete grp_fact_fu_70;
    delete grp_fact_fu_76;
    delete grp_power_fu_81;
    delete grp_power_fu_88;
    delete sin_taylor_seriesdEe_U7;
    delete sin_taylor_seriesdEe_U8;
    delete sin_taylor_serieseOg_U9;
    delete sin_taylor_serieseOg_U10;
}

void Loop_sum_loop_proc::thread_ap_var_for_const0() {
    ap_var_for_const0 = ap_const_logic_1;
}

void Loop_sum_loop_proc::thread_ap_clk_no_reset_() {
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_CS_fsm = ap_ST_fsm_state1;
    } else {
        ap_CS_fsm = ap_NS_fsm.read();
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_done_reg = ap_const_logic_0;
    } else {
        if (esl_seteq<1,1,1>(ap_const_logic_1, ap_continue.read())) {
            ap_done_reg = ap_const_logic_0;
        } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
                    esl_seteq<1,1,1>(tmp_i_fu_116_p2.read(), ap_const_lv1_0))) {
            ap_done_reg = ap_const_logic_1;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_fact_fu_70_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(tmp_i_fu_116_p2.read(), ap_const_lv1_1))) {
            ap_reg_grp_fact_fu_70_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_fact_fu_70_ap_ready.read())) {
            ap_reg_grp_fact_fu_70_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_fact_fu_76_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(tmp_i_fu_116_p2.read(), ap_const_lv1_1))) {
            ap_reg_grp_fact_fu_76_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_fact_fu_76_ap_ready.read())) {
            ap_reg_grp_fact_fu_76_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_power_fu_81_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(tmp_i_fu_116_p2.read(), ap_const_lv1_1))) {
            ap_reg_grp_power_fu_81_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_power_fu_81_ap_ready.read())) {
            ap_reg_grp_power_fu_81_ap_start = ap_const_logic_0;
        }
    }
    if ( ap_rst.read() == ap_const_logic_1) {
        ap_reg_grp_power_fu_88_ap_start = ap_const_logic_0;
    } else {
        if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
             esl_seteq<1,1,1>(tmp_i_fu_116_p2.read(), ap_const_lv1_1))) {
            ap_reg_grp_power_fu_88_ap_start = ap_const_logic_1;
        } else if (esl_seteq<1,1,1>(ap_const_logic_1, grp_power_fu_88_ap_ready.read())) {
            ap_reg_grp_power_fu_88_ap_start = ap_const_logic_0;
        }
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        i_0_i_i_reg_58 = i_reg_163.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        i_0_i_i_reg_58 = ap_const_lv5_1;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        sum_negative_0_loc_l_reg_46 = grp_fu_99_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        sum_negative_0_loc_l_reg_46 = ap_const_lv64_0;
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read())) {
        sum_positive_0_loc_l_reg_34 = grp_fu_94_p2.read();
    } else if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && 
                !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
        sum_positive_0_loc_l_reg_34 = ap_const_lv64_0;
    }
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_i_fu_116_p2.read(), ap_const_lv1_1))) {
        i_reg_163 = i_fu_130_p2.read();
        tmp_5_i_reg_157 = tmp_5_i_fu_122_p2.read();
    }
    if (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state33.read())) {
        tmp_3_i_reg_188 = grp_fu_104_p2.read();
        tmp_8_i_reg_193 = grp_fu_110_p2.read();
    }
}

void Loop_sum_loop_proc::thread_ap_CS_fsm_state1() {
    ap_CS_fsm_state1 = ap_CS_fsm.read()[0];
}

void Loop_sum_loop_proc::thread_ap_CS_fsm_state2() {
    ap_CS_fsm_state2 = ap_CS_fsm.read()[1];
}

void Loop_sum_loop_proc::thread_ap_CS_fsm_state3() {
    ap_CS_fsm_state3 = ap_CS_fsm.read()[2];
}

void Loop_sum_loop_proc::thread_ap_CS_fsm_state33() {
    ap_CS_fsm_state33 = ap_CS_fsm.read()[32];
}

void Loop_sum_loop_proc::thread_ap_CS_fsm_state34() {
    ap_CS_fsm_state34 = ap_CS_fsm.read()[33];
}

void Loop_sum_loop_proc::thread_ap_CS_fsm_state35() {
    ap_CS_fsm_state35 = ap_CS_fsm.read()[34];
}

void Loop_sum_loop_proc::thread_ap_CS_fsm_state36() {
    ap_CS_fsm_state36 = ap_CS_fsm.read()[35];
}

void Loop_sum_loop_proc::thread_ap_CS_fsm_state37() {
    ap_CS_fsm_state37 = ap_CS_fsm.read()[36];
}

void Loop_sum_loop_proc::thread_ap_CS_fsm_state38() {
    ap_CS_fsm_state38 = ap_CS_fsm.read()[37];
}

void Loop_sum_loop_proc::thread_ap_block_state1() {
    ap_block_state1 = (esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1));
}

void Loop_sum_loop_proc::thread_ap_block_state3_on_subcall_done() {
    ap_block_state3_on_subcall_done = (esl_seteq<1,1,1>(ap_const_logic_0, grp_power_fu_81_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_fact_fu_70_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_power_fu_88_ap_done.read()) || esl_seteq<1,1,1>(ap_const_logic_0, grp_fact_fu_76_ap_done.read()));
}

void Loop_sum_loop_proc::thread_ap_done() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_i_fu_116_p2.read(), ap_const_lv1_0))) {
        ap_done = ap_const_logic_1;
    } else {
        ap_done = ap_done_reg.read();
    }
}

void Loop_sum_loop_proc::thread_ap_idle() {
    if ((esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) && 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()))) {
        ap_idle = ap_const_logic_1;
    } else {
        ap_idle = ap_const_logic_0;
    }
}

void Loop_sum_loop_proc::thread_ap_ready() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && 
         esl_seteq<1,1,1>(tmp_i_fu_116_p2.read(), ap_const_lv1_0))) {
        ap_ready = ap_const_logic_1;
    } else {
        ap_ready = ap_const_logic_0;
    }
}

void Loop_sum_loop_proc::thread_ap_return_0() {
    ap_return_0 = sum_positive_0_loc_l_reg_34.read();
}

void Loop_sum_loop_proc::thread_ap_return_1() {
    ap_return_1 = sum_negative_0_loc_l_reg_46.read();
}

void Loop_sum_loop_proc::thread_grp_fact_fu_70_ap_start() {
    grp_fact_fu_70_ap_start = ap_reg_grp_fact_fu_70_ap_start.read();
}

void Loop_sum_loop_proc::thread_grp_fact_fu_76_ap_start() {
    grp_fact_fu_76_ap_start = ap_reg_grp_fact_fu_76_ap_start.read();
}

void Loop_sum_loop_proc::thread_grp_fu_104_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_on_subcall_done.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()))) {
        grp_fu_104_ce = ap_const_logic_0;
    } else {
        grp_fu_104_ce = ap_const_logic_1;
    }
}

void Loop_sum_loop_proc::thread_grp_fu_110_ce() {
    if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state38.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state34.read()) || 
         (esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && 
          esl_seteq<1,1,1>(ap_const_boolean_1, ap_block_state3_on_subcall_done.read())) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state35.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state36.read()) || 
         esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state37.read()))) {
        grp_fu_110_ce = ap_const_logic_0;
    } else {
        grp_fu_110_ce = ap_const_logic_1;
    }
}

void Loop_sum_loop_proc::thread_grp_power_fu_81_ap_start() {
    grp_power_fu_81_ap_start = ap_reg_grp_power_fu_81_ap_start.read();
}

void Loop_sum_loop_proc::thread_grp_power_fu_88_ap_start() {
    grp_power_fu_88_ap_start = ap_reg_grp_power_fu_88_ap_start.read();
}

void Loop_sum_loop_proc::thread_i_fu_130_p2() {
    i_fu_130_p2 = (!i_0_i_i_reg_58.read().is_01() || !ap_const_lv5_4.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_i_i_reg_58.read()) + sc_biguint<5>(ap_const_lv5_4));
}

void Loop_sum_loop_proc::thread_tmp_5_i_fu_122_p2() {
    tmp_5_i_fu_122_p2 = (!i_0_i_i_reg_58.read().is_01() || !ap_const_lv5_2.is_01())? sc_lv<5>(): (sc_biguint<5>(i_0_i_i_reg_58.read()) + sc_biguint<5>(ap_const_lv5_2));
}

void Loop_sum_loop_proc::thread_tmp_i_fu_116_p2() {
    tmp_i_fu_116_p2 = (!i_0_i_i_reg_58.read().is_01() || !ap_const_lv5_15.is_01())? sc_lv<1>(): (sc_biguint<5>(i_0_i_i_reg_58.read()) < sc_biguint<5>(ap_const_lv5_15));
}

void Loop_sum_loop_proc::thread_ap_NS_fsm() {
    switch (ap_CS_fsm.read().to_uint64()) {
        case 1 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state1.read()) && !(esl_seteq<1,1,1>(ap_const_logic_0, ap_start.read()) || esl_seteq<1,1,1>(ap_done_reg.read(), ap_const_logic_1)))) {
                ap_NS_fsm = ap_ST_fsm_state2;
            } else {
                ap_NS_fsm = ap_ST_fsm_state1;
            }
            break;
        case 2 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state2.read()) && esl_seteq<1,1,1>(tmp_i_fu_116_p2.read(), ap_const_lv1_0))) {
                ap_NS_fsm = ap_ST_fsm_state1;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 4 : 
            if ((esl_seteq<1,1,1>(ap_const_logic_1, ap_CS_fsm_state3.read()) && esl_seteq<1,1,1>(ap_block_state3_on_subcall_done.read(), ap_const_boolean_0))) {
                ap_NS_fsm = ap_ST_fsm_state4;
            } else {
                ap_NS_fsm = ap_ST_fsm_state3;
            }
            break;
        case 8 : 
            ap_NS_fsm = ap_ST_fsm_state5;
            break;
        case 16 : 
            ap_NS_fsm = ap_ST_fsm_state6;
            break;
        case 32 : 
            ap_NS_fsm = ap_ST_fsm_state7;
            break;
        case 64 : 
            ap_NS_fsm = ap_ST_fsm_state8;
            break;
        case 128 : 
            ap_NS_fsm = ap_ST_fsm_state9;
            break;
        case 256 : 
            ap_NS_fsm = ap_ST_fsm_state10;
            break;
        case 512 : 
            ap_NS_fsm = ap_ST_fsm_state11;
            break;
        case 1024 : 
            ap_NS_fsm = ap_ST_fsm_state12;
            break;
        case 2048 : 
            ap_NS_fsm = ap_ST_fsm_state13;
            break;
        case 4096 : 
            ap_NS_fsm = ap_ST_fsm_state14;
            break;
        case 8192 : 
            ap_NS_fsm = ap_ST_fsm_state15;
            break;
        case 16384 : 
            ap_NS_fsm = ap_ST_fsm_state16;
            break;
        case 32768 : 
            ap_NS_fsm = ap_ST_fsm_state17;
            break;
        case 65536 : 
            ap_NS_fsm = ap_ST_fsm_state18;
            break;
        case 131072 : 
            ap_NS_fsm = ap_ST_fsm_state19;
            break;
        case 262144 : 
            ap_NS_fsm = ap_ST_fsm_state20;
            break;
        case 524288 : 
            ap_NS_fsm = ap_ST_fsm_state21;
            break;
        case 1048576 : 
            ap_NS_fsm = ap_ST_fsm_state22;
            break;
        case 2097152 : 
            ap_NS_fsm = ap_ST_fsm_state23;
            break;
        case 4194304 : 
            ap_NS_fsm = ap_ST_fsm_state24;
            break;
        case 8388608 : 
            ap_NS_fsm = ap_ST_fsm_state25;
            break;
        case 16777216 : 
            ap_NS_fsm = ap_ST_fsm_state26;
            break;
        case 33554432 : 
            ap_NS_fsm = ap_ST_fsm_state27;
            break;
        case 67108864 : 
            ap_NS_fsm = ap_ST_fsm_state28;
            break;
        case 134217728 : 
            ap_NS_fsm = ap_ST_fsm_state29;
            break;
        case 268435456 : 
            ap_NS_fsm = ap_ST_fsm_state30;
            break;
        case 536870912 : 
            ap_NS_fsm = ap_ST_fsm_state31;
            break;
        case 1073741824 : 
            ap_NS_fsm = ap_ST_fsm_state32;
            break;
        case 2147483648 : 
            ap_NS_fsm = ap_ST_fsm_state33;
            break;
        case 4294967296 : 
            ap_NS_fsm = ap_ST_fsm_state34;
            break;
        case 8589934592 : 
            ap_NS_fsm = ap_ST_fsm_state35;
            break;
        case 17179869184 : 
            ap_NS_fsm = ap_ST_fsm_state36;
            break;
        case 34359738368 : 
            ap_NS_fsm = ap_ST_fsm_state37;
            break;
        case 68719476736 : 
            ap_NS_fsm = ap_ST_fsm_state38;
            break;
        case 137438953472 : 
            ap_NS_fsm = ap_ST_fsm_state2;
            break;
        default : 
            ap_NS_fsm = "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
            break;
    }
}

}

